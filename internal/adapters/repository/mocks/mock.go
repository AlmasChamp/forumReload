// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	entities "forum/internal/model"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AllPost mocks base method.
func (m *MockService) AllPost() ([]entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllPost")
	ret0, _ := ret[0].([]entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllPost indicates an expected call of AllPost.
func (mr *MockServiceMockRecorder) AllPost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllPost", reflect.TypeOf((*MockService)(nil).AllPost))
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(input entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), input)
}

// LogInUser mocks base method.
func (m *MockService) LogInUser(email, password string) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogInUser", email, password)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogInUser indicates an expected call of LogInUser.
func (mr *MockServiceMockRecorder) LogInUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInUser", reflect.TypeOf((*MockService)(nil).LogInUser), email, password)
}

// LogOut mocks base method.
func (m *MockService) LogOut(cookieVal string) *http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", cookieVal)
	ret0, _ := ret[0].(*http.Cookie)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockServiceMockRecorder) LogOut(cookieVal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockService)(nil).LogOut), cookieVal)
}

// ValueCookie mocks base method.
func (m *MockService) ValueCookie(userCookie string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueCookie", userCookie)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValueCookie indicates an expected call of ValueCookie.
func (mr *MockServiceMockRecorder) ValueCookie(userCookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueCookie", reflect.TypeOf((*MockService)(nil).ValueCookie), userCookie)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockHandler) Register(mux *http.ServeMux) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", mux)
}

// Register indicates an expected call of Register.
func (mr *MockHandlerMockRecorder) Register(mux interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockHandler)(nil).Register), mux)
}
