// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	entities "forum/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockStorage) AddUser(name, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", name, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageMockRecorder) AddUser(name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), name, email, password)
}

// DeleteCookie mocks base method.
func (m *MockStorage) DeleteCookie(cookie string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCookie", cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockStorageMockRecorder) DeleteCookie(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockStorage)(nil).DeleteCookie), cookie)
}

// GetAllPosts mocks base method.
func (m *MockStorage) GetAllPosts() ([]entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockStorageMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockStorage)(nil).GetAllPosts))
}

// GetUserId mocks base method.
func (m *MockStorage) GetUserId(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockStorageMockRecorder) GetUserId(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockStorage)(nil).GetUserId), email)
}

// GetUserPassword mocks base method.
func (m *MockStorage) GetUserPassword(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPassword", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPassword indicates an expected call of GetUserPassword.
func (mr *MockStorageMockRecorder) GetUserPassword(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*MockStorage)(nil).GetUserPassword), email)
}

// GetValueCookie mocks base method.
func (m *MockStorage) GetValueCookie(userCookie string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueCookie", userCookie)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueCookie indicates an expected call of GetValueCookie.
func (mr *MockStorageMockRecorder) GetValueCookie(userCookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueCookie", reflect.TypeOf((*MockStorage)(nil).GetValueCookie), userCookie)
}

// SetCookie mocks base method.
func (m *MockStorage) SetCookie(cookieVal string, cookieExp int, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCookie", cookieVal, cookieExp, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCookie indicates an expected call of SetCookie.
func (mr *MockStorageMockRecorder) SetCookie(cookieVal, cookieExp, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockStorage)(nil).SetCookie), cookieVal, cookieExp, id)
}
